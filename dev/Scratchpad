	
	vector<PfactOfN>::iterator lo;
	// phase 1 - establish index for hi_prime
	
	PrimePower qry = query.back();
	for(lo = db.begin(); lo != db.end(); ++lo) {
		//PrimePower dat = lo->back();
		if (lo->back().first == qry.first) break;
	}
	if (lo == db.end()) { 
		printf("Error: lower_bound not found\n");
		exit(1);
	}
	size_t row = distance(db.begin(), lo);
	size_t col = lo->size()-1;
	printf("Found query, row %lu col %lu\n", row, col);
	PrimePower pp = db[row][col];
	// extablish the correct prime/power entry
	while(pp.second < qry.second){
		row += 1;
		pp = db[row][col];
	}
	
	// if powers for all other primes are greater than query - solution
	// 	else increment row and retry

	bool fail = false;
	while(fail){
		for(int c = 0; c != col; ++c){
			if((db[row][c].first == qry.first)and(db[row][c].second < qry.second)){
				fail = true;
				break;
			}
		}
		if(fail) row += 1;
	}
	printf("%lu!: ", row+2);
	prt_pfofn(db[row]);
	prt_pfofn(query);
	NL;
