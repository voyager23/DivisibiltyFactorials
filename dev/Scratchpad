	02Nov2021
	
uint find_smallest_factorial(std::vector<PfactOfN> &db, PfactOfN &query){
	uint row,col;
	PfactOfN::iterator i_col, i_pp;
	bool solution = false;
	PrimePower hi_prime = query.back();
	// find the starting row,col in database
	row = 0;
	while(db[row].back().first < hi_prime.first) ++row;
	col = db[row].size() - 1;
	while (db[row][col].second < hi_prime.second) ++row;
	
	// scan db forward for row which has prime powers >= query
	while(row++ != db.size()){
		// both db[row] and query are vectors of PrimePower {prime,power}
		for(i_pp = query.begin(); i_pp != query.end(); ++i_pp){
			for(i_col = db[row].begin(); i_col != db[row].end(); ++i_col){
				if(i_col->first < i_pp->first) continue;
				if(i_col->second >= i_pp->first){ // next pp in query
					solution = true;
					break;
				} else { 
					// next row in db
					solution = false;
				}
				if(!solution) break; // break from colum scan
			}
			if(!solution) break; // break from query scan
		} // for i_pp
		
		return row+1;
	}		
	return 0;
}
	
==============================
	vector<PfactOfN>::iterator lo;
	// phase 1 - establish index for hi_prime
	
	PrimePower qry = query.back();
	for(lo = db.begin(); lo != db.end(); ++lo) {
		//PrimePower dat = lo->back();
		if (lo->back().first == qry.first) break;
	}
	if (lo == db.end()) { 
		printf("Error: lower_bound not found\n");
		exit(1);
	}
	size_t row = distance(db.begin(), lo);
	size_t col = lo->size()-1;
	printf("Found query, row %lu col %lu\n", row, col);
	PrimePower pp = db[row][col];
	// extablish the correct prime/power entry
	while(pp.second < qry.second){
		row += 1;
		pp = db[row][col];
	}
	
	// if powers for all other primes are greater than query - solution
	// 	else increment row and retry

	bool fail = false;
	while(fail){
		for(int c = 0; c != col; ++c){
			if((db[row][c].first == qry.first)and(db[row][c].second < qry.second)){
				fail = true;
				break;
			}
		}
		if(fail) row += 1;
	}
	printf("%lu!: ", row+2);
	prt_pfofn(db[row]);
	prt_pfofn(query);
	NL;
